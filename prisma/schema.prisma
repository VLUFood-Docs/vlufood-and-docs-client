datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

model Category {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  description String?
  user      User?   @relation(fields: [userId], references: [id])
  userId    String? @db.ObjectId
  foods     Food[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Food {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  image       String[]
  available   Boolean
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?   @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?   @db.ObjectId
  options     Option[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OrderItem OrderItem[]
}

model Option {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  food        Food    @relation(fields: [foodId], references: [id])
  foodId      String  @db.ObjectId
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OrderItemOption OrderItemOption[]
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  restaurantName String?
  restaurantAddress String?
  restaurantPhone String?
  restaurantType String?
  restaurantDescription String?
  categories    Category[]
  foods         Food[]
  accounts      Account[]
  storeId String[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order[]
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}


model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  generatedId String?
  customerName String
  customerAddress String
  customerPhone String?
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  items OrderItem[]
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status OrderStatus
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  orderId String @db.ObjectId
  order Order @relation(fields: [orderId], references: [id])
  foodId String @db.ObjectId
  food Food @relation(fields: [foodId], references: [id])
  quantity Int
  options OrderItemOption[]
}

model OrderItemOption {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  orderItemId String @db.ObjectId
  orderItem OrderItem @relation(fields: [orderItemId], references: [id])
  optionId String @db.ObjectId
  option Option @relation(fields: [optionId], references: [id])
}